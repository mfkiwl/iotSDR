# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import iotSDR_pb2 as iotSDR__pb2


class ConfigSDRStub(object):
    """The configuration APIs Set..Get
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setFrequency = channel.unary_unary(
                '/iotSDR.ConfigSDR/setFrequency',
                request_serializer=iotSDR__pb2.RFfreq_config.SerializeToString,
                response_deserializer=iotSDR__pb2.Rf_freq.FromString,
                )
        self.getFrequency = channel.unary_unary(
                '/iotSDR.ConfigSDR/getFrequency',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.Rf_freq.FromString,
                )
        self.listFrequencies = channel.unary_stream(
                '/iotSDR.ConfigSDR/listFrequencies',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.ListFreq.FromString,
                )
        self.setSampleRate = channel.unary_unary(
                '/iotSDR.ConfigSDR/setSampleRate',
                request_serializer=iotSDR__pb2.SamplingRate_config.SerializeToString,
                response_deserializer=iotSDR__pb2.status.FromString,
                )
        self.getSampleRate = channel.unary_unary(
                '/iotSDR.ConfigSDR/getSampleRate',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.status.FromString,
                )
        self.listSampleRates = channel.unary_stream(
                '/iotSDR.ConfigSDR/listSampleRates',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.sampling_rates.FromString,
                )
        self.setGain = channel.unary_unary(
                '/iotSDR.ConfigSDR/setGain',
                request_serializer=iotSDR__pb2.tx_gain.SerializeToString,
                response_deserializer=iotSDR__pb2.status.FromString,
                )
        self.getGain = channel.unary_unary(
                '/iotSDR.ConfigSDR/getGain',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.status.FromString,
                )
        self.getGainRange = channel.unary_unary(
                '/iotSDR.ConfigSDR/getGainRange',
                request_serializer=iotSDR__pb2.Rf_chan.SerializeToString,
                response_deserializer=iotSDR__pb2.gainRange.FromString,
                )
        self.setTxLUT = channel.unary_unary(
                '/iotSDR.ConfigSDR/setTxLUT',
                request_serializer=iotSDR__pb2.txLUT.SerializeToString,
                response_deserializer=iotSDR__pb2.status.FromString,
                )


class ConfigSDRServicer(object):
    """The configuration APIs Set..Get
    """

    def setFrequency(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFrequency(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listFrequencies(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSampleRate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSampleRate(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listSampleRates(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setGain(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGain(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getGainRange(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setTxLUT(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigSDRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.setFrequency,
                    request_deserializer=iotSDR__pb2.RFfreq_config.FromString,
                    response_serializer=iotSDR__pb2.Rf_freq.SerializeToString,
            ),
            'getFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.getFrequency,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.Rf_freq.SerializeToString,
            ),
            'listFrequencies': grpc.unary_stream_rpc_method_handler(
                    servicer.listFrequencies,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.ListFreq.SerializeToString,
            ),
            'setSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.setSampleRate,
                    request_deserializer=iotSDR__pb2.SamplingRate_config.FromString,
                    response_serializer=iotSDR__pb2.status.SerializeToString,
            ),
            'getSampleRate': grpc.unary_unary_rpc_method_handler(
                    servicer.getSampleRate,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.status.SerializeToString,
            ),
            'listSampleRates': grpc.unary_stream_rpc_method_handler(
                    servicer.listSampleRates,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.sampling_rates.SerializeToString,
            ),
            'setGain': grpc.unary_unary_rpc_method_handler(
                    servicer.setGain,
                    request_deserializer=iotSDR__pb2.tx_gain.FromString,
                    response_serializer=iotSDR__pb2.status.SerializeToString,
            ),
            'getGain': grpc.unary_unary_rpc_method_handler(
                    servicer.getGain,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.status.SerializeToString,
            ),
            'getGainRange': grpc.unary_unary_rpc_method_handler(
                    servicer.getGainRange,
                    request_deserializer=iotSDR__pb2.Rf_chan.FromString,
                    response_serializer=iotSDR__pb2.gainRange.SerializeToString,
            ),
            'setTxLUT': grpc.unary_unary_rpc_method_handler(
                    servicer.setTxLUT,
                    request_deserializer=iotSDR__pb2.txLUT.FromString,
                    response_serializer=iotSDR__pb2.status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iotSDR.ConfigSDR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConfigSDR(object):
    """The configuration APIs Set..Get
    """

    @staticmethod
    def setFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/setFrequency',
            iotSDR__pb2.RFfreq_config.SerializeToString,
            iotSDR__pb2.Rf_freq.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/getFrequency',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.Rf_freq.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listFrequencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iotSDR.ConfigSDR/listFrequencies',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.ListFreq.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/setSampleRate',
            iotSDR__pb2.SamplingRate_config.SerializeToString,
            iotSDR__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSampleRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/getSampleRate',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listSampleRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iotSDR.ConfigSDR/listSampleRates',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.sampling_rates.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/setGain',
            iotSDR__pb2.tx_gain.SerializeToString,
            iotSDR__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/getGain',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getGainRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/getGainRange',
            iotSDR__pb2.Rf_chan.SerializeToString,
            iotSDR__pb2.gainRange.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setTxLUT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.ConfigSDR/setTxLUT',
            iotSDR__pb2.txLUT.SerializeToString,
            iotSDR__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class streamingIQserviceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setupStream = channel.unary_unary(
                '/iotSDR.streamingIQservice/setupStream',
                request_serializer=iotSDR__pb2.streamSetupRequest.SerializeToString,
                response_deserializer=iotSDR__pb2.streamID.FromString,
                )
        self.sendIQsampleStream = channel.unary_stream(
                '/iotSDR.streamingIQservice/sendIQsampleStream',
                request_serializer=iotSDR__pb2.framesRequest.SerializeToString,
                response_deserializer=iotSDR__pb2.iqSampleFrames.FromString,
                )


class streamingIQserviceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def setupStream(self, request, context):
        """Streamin  APIs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendIQsampleStream(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_streamingIQserviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setupStream': grpc.unary_unary_rpc_method_handler(
                    servicer.setupStream,
                    request_deserializer=iotSDR__pb2.streamSetupRequest.FromString,
                    response_serializer=iotSDR__pb2.streamID.SerializeToString,
            ),
            'sendIQsampleStream': grpc.unary_stream_rpc_method_handler(
                    servicer.sendIQsampleStream,
                    request_deserializer=iotSDR__pb2.framesRequest.FromString,
                    response_serializer=iotSDR__pb2.iqSampleFrames.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iotSDR.streamingIQservice', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class streamingIQservice(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def setupStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/iotSDR.streamingIQservice/setupStream',
            iotSDR__pb2.streamSetupRequest.SerializeToString,
            iotSDR__pb2.streamID.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendIQsampleStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/iotSDR.streamingIQservice/sendIQsampleStream',
            iotSDR__pb2.framesRequest.SerializeToString,
            iotSDR__pb2.iqSampleFrames.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
